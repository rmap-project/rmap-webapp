#############################
#  	  rmap core props	 	#
#############################
#number of rdf statements returned before pagination required
rmapcore.defaultQueryLimit=200
#maximum number of rdf statements that can be returned in a single query
rmapcore.maxQueryLimit=2000
#options are active, inactive, all. This filter on status will apply
#where no status filter is specified. The status refers to the status of the 
#DiSCO containing the data 
rmapcore.defaultStatusFilter=active
#options are UNORDERED (no ordering) applied to results or SELECT_ORDER (i.e. orders columns selected alpha-numerically)
#UNORDERED may result in tiny ordering inconsistencies when using pagination at the same time that data is being
#written to the database. SELECT_ORDER is significantly performance-wise slower but will eliminate skipped 
#or repeated records where reads and writes are happening simultaneously. 
rmapcore.defaultOrderBy=UNORDERED

#############################
#  	sesame api properties   #
#############################
#root url of sesame framework api n which is being used.
#e.g. http\://55.55.55.55/graphdb/ or http\://55.55.55.55/openrdf-sesame/
sesamehttp.url=http\://[yourGraphDbServerName]/graphdb/
sesamehttp.repositoryName=[repositoryName]
sesamehttp.user=[respositoryUserName]
sesamehttp.password=[repositoryPwd]

#Only used for In Memory Sail Triplestore, which can be used for testing locally. Leave blank
sesamesail.dataDirectory=

#############################
#  		ark properties 		#
#############################
#To generate valid ARKs, your institution must be registered to do so. 
#See this page for more information: https://confluence.ucop.edu/display/Curation/ARK
#The arkservice.url must point to a URL that can return noids in the format "id: 27927/****** id: 27927/******" 
#e.g. id: 27927/rmpkdf29kd id: 27927/rmp13ds0n2 id: 27927/rmpks92kdmkf 
#The service must support passing a number of IDs as a parameter e.g. noidgenerator.sh?10 
#If it is not possible to create such a service, you will need to get the rmap-core code and create an
#alternative IdService that can generate URIs for your RMap objects.  For small tests, there is a random ID 
#generator that can be used, but it does not exclude duplicates and should not be used in a production environment. 
#To configure the ID service to point to the random number generator, or a different service, find the relevant 
#property in rmap-core/src/main/resources/spring-rmapcore-context.xml
arkservice.url=http\://[yourNoidServerName]/noidgenerator.sh

#The round trip to retrieve an ARK from a microservice can be expensive when there
#are a high volume of DiSCOs being created. Consider several ARKs are used per disco. 
#bufferSize determines number of ARKs to be retrieved in one trip. These are then held in memory 
#and used as needed.
arkservice.bufferSize=200

#prefix added to ID
arkservice.idPrefix=ark\:/

#Name Assigning Authority Number - number after the prefix 
#Note this does not change the number, which is provided by the service, it is just used to validate
#See http://www.cdlib.org/uc3/naan_table.html for a registry.
arkservice.idNaan=[yourArkNaan]

#Number of retries on failure to reach service
arkservice.maxRetries=2
